COMPARISON QUERY OPERATORS 
  .$eq (equal to)[

      The $eq operator is a comparison query operator that allows you to match documents where the value of a 
      field equals a specified value.

      #1) Using $eq operator to check if a field equals a specified value
           db.products.find({price: {  $eq: 899  }}, { name: 1,  price: 1})
      #2) Using the $eq operator to check if a field in an embedded document equals a value
           db.products.find({"spec.ram": {  $eq: 899  }}, { "spec.ram": 1,  price: 1})
      #3) Using $eq operator to check if an array element equals a value
           db.products.find({"color": {  $eq: "red  }}, { "color": 1,  price: 1}) //here color is array of color
           
      #4) Using $eq operator to check if a field equals a date
           db.products.find({"day": {  $eq: new ISODate("2020-05-14")  }}, { "day": 1,  price: 1})



  ]

  .$ne (not equal)
  .$gt (greater than)[

       The $gt operator is a comparison query operator that allows you to select documents where the value of a field
       is greater than (>) a specified value.

       syntx : { field: { $gt: value}}
        
      #1) Using $gt operator to check if a field greater a specified value
           db.products.find({price: {  $gt: 899  }}, { name: 1,  price: 1})
      #2) Using the $gt operator to check if a field in an embedded document greater a value
           db.products.find({"spec.ram": {  $gt: 899  }}, { "spec.ram": 1,  price: 1})
      #3) Using $gt operator to check if an array element greater a value
           db.products.find({"color": {  $gt: "red  }}, { "color": 1,  price: 1}) //here color is array of color
           
      #4) Using $gt operator to check if a field greater a date
           db.products.find({"day": {  $gt: new ISODate("2020-05-14")  }}, { "day": 1,  price: 1})



   ]


  .$gte (greater than equal)
  .$lt (less than)
  .$lte (less than equal)
  .$in (lies in)[

      doc :The $in is a comparison query operator that allows you to select documents where the value of a
           field is equal to any value in an array.
      syntx: {field:{$in:[val1,val2,val3]}}

      # Using the $in operator with regular expressions
        .db.products.find({
                            color: {
                                $in: [/^g+/, /^w+/]
                            }
                        }, {
                            name: 1,
                            color: 1
                        })


  ]
  .$nin (not in )

